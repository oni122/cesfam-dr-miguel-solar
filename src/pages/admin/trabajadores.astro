---
import Layout from "../../layouts/Layout.astro";
import { prisma } from "../../lib/prisma";

const user = Astro.locals.user;

if (!user?.isAdmin) {
  return Astro.redirect("/");
}

const [especialidades, trabajadores] = await Promise.all([
  prisma.especialidad.findMany({
    orderBy: { nombre_especialidad: "asc" },
  }),
  prisma.trabajador.findMany({
    orderBy: [
      { estado_trabajador: "asc" },
      { apellido_p_trabajador: "asc" },
      { apellido_m_trabajador: "asc" },
    ],
    include: {
      especialidad: {
        select: {
          id_especialidad: true,
          nombre_especialidad: true,
        },
      },
    },
  }),
]);
---

<Layout title="Gestion de trabajadores">
  <section class="bg-gradient-to-b from-[#200934] via-[#2d1250] to-[#200934] py-12">
    <div class="mx-auto flex max-w-6xl flex-col gap-10 px-4 sm:px-6">
      <header class="text-white">
        <p class="text-sm uppercase tracking-[0.35em] text-white/60">Equipo</p>
        <h1 class="mt-3 text-3xl font-bold sm:text-4xl">Administrar trabajadores</h1>
        <p class="mt-2 max-w-2xl text-white/80">
          Registra nuevos profesionales y gestiona sus accesos a la plataforma. Las credenciales iniciales se generan de forma automatica.
        </p>
      </header>

      <section class="grid gap-6 lg:grid-cols-2">
        <article class="rounded-3xl bg-white p-6 shadow-xl">
          <h2 class="text-xl font-semibold text-[#200934]">Nuevo trabajador</h2>
          <p class="mt-1 text-sm text-[#200934]/70">
            La contrasena inicial seguira el formato <strong>RUT + primer nombre en minusculas</strong>. Se recomienda informar al profesional y pedir cambio al iniciar sesion.
          </p>
          <form id="create-worker-form" class="mt-5 grid gap-4 md:grid-cols-2" autocomplete="off">
            <div class="md:col-span-2">
              <label for="rut" class="mb-2 block text-sm font-semibold text-[#200934]">RUT</label>
              <input
                id="rut"
                name="rut"
                type="text"
                required
                placeholder="12.345.678-9"
                class="w-full rounded-2xl border border-[#200934]/15 px-4 py-3 text-[#200934] shadow-sm outline-none transition focus:border-[#200934] focus:ring-2 focus:ring-[#200934]/30"
              />
            </div>

            <div>
              <label for="primerNombre" class="mb-2 block text-sm font-semibold text-[#200934]">Primer nombre</label>
              <input
                id="primerNombre"
                name="primerNombre"
                type="text"
                required
                placeholder="Ana"
                class="w-full rounded-2xl border border-[#200934]/15 px-4 py-3 text-[#200934] shadow-sm outline-none transition focus:border-[#200934] focus:ring-2 focus:ring-[#200934]/30"
              />
            </div>

            <div>
              <label for="segundoNombre" class="mb-2 block text-sm font-semibold text-[#200934]">Segundo nombre</label>
              <input
                id="segundoNombre"
                name="segundoNombre"
                type="text"
                placeholder="Opcional"
                class="w-full rounded-2xl border border-[#200934]/15 px-4 py-3 text-[#200934] shadow-sm outline-none transition focus:border-[#200934] focus:ring-2 focus:ring-[#200934]/30"
              />
            </div>

            <div>
              <label for="apellidoPaterno" class="mb-2 block text-sm font-semibold text-[#200934]">Apellido paterno</label>
              <input
                id="apellidoPaterno"
                name="apellidoPaterno"
                type="text"
                required
                placeholder="Gonzalez"
                class="w-full rounded-2xl border border-[#200934]/15 px-4 py-3 text-[#200934] shadow-sm outline-none transition focus:border-[#200934] focus:ring-2 focus:ring-[#200934]/30"
              />
            </div>

            <div>
              <label for="apellidoMaterno" class="mb-2 block text-sm font-semibold text-[#200934]">Apellido materno</label>
              <input
                id="apellidoMaterno"
                name="apellidoMaterno"
                type="text"
                required
                placeholder="Muñoz"
                class="w-full rounded-2xl border border-[#200934]/15 px-4 py-3 text-[#200934] shadow-sm outline-none transition focus:border-[#200934] focus:ring-2 focus:ring-[#200934]/30"
              />
            </div>

            <div>
              <label for="correo" class="mb-2 block text-sm font-semibold text-[#200934]">Correo</label>
              <input
                id="correo"
                name="correo"
                type="email"
                required
                placeholder="correo@ejemplo.cl"
                class="w-full rounded-2xl border border-[#200934]/15 px-4 py-3 text-[#200934] shadow-sm outline-none transition focus:border-[#200934] focus:ring-2 focus:ring-[#200934]/30"
              />
            </div>

            <div>
              <label for="celular" class="mb-2 block text-sm font-semibold text-[#200934]">Celular</label>
              <input
                id="celular"
                name="celular"
                type="tel"
                required
                placeholder="+56 9 0000 0000"
                class="w-full rounded-2xl border border-[#200934]/15 px-4 py-3 text-[#200934] shadow-sm outline-none transition focus:border-[#200934] focus:ring-2 focus:ring-[#200934]/30"
              />
            </div>

            <div class="md:col-span-2">
              <label for="direccion" class="mb-2 block text-sm font-semibold text-[#200934]">Direccion</label>
              <input
                id="direccion"
                name="direccion"
                type="text"
                required
                placeholder="Calle 123, Ciudad"
                class="w-full rounded-2xl border border-[#200934]/15 px-4 py-3 text-[#200934] shadow-sm outline-none transition focus:border-[#200934] focus:ring-2 focus:ring-[#200934]/30"
              />
            </div>

            <div class="md:col-span-2">
              <label for="especialidadId" class="mb-2 block text-sm font-semibold text-[#200934]">Especialidad</label>
              <select
                id="especialidadId"
                name="especialidadId"
                required
                class="w-full rounded-2xl border border-[#200934]/15 px-4 py-3 text-[#200934] shadow-sm outline-none transition focus:border-[#200934] focus:ring-2 focus:ring-[#200934]/30"
              >
                <option value="" selected disabled>Selecciona una especialidad</option>
                {especialidades.map((especialidad) => (
                  <option value={especialidad.id_especialidad}>{especialidad.nombre_especialidad}</option>
                ))}
              </select>
            </div>

            <div class="md:col-span-2 flex flex-col gap-3">
              <button
                id="create-worker-submit"
                type="submit"
                class="rounded-2xl bg-[#321355] px-6 py-3 text-sm font-semibold text-white transition hover:bg-[#200934] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#321355] disabled:opacity-60"
              >
                Registrar trabajador
              </button>
              <p
                id="create-worker-status"
                class="min-h-[1.25rem] text-sm font-medium text-[#200934]"
                aria-live="polite"
              ></p>
            </div>
          </form>
        </article>

        <article class="rounded-3xl bg-white p-6 shadow-xl">
          <h2 class="text-xl font-semibold text-[#200934]">Listado actual</h2>
          <p class="mt-1 text-sm text-[#200934]/70">
            {trabajadores.length > 0
              ? "Revisa especialidades y estado de los profesionales."
              : "Aun no hay trabajadores registrados."}
          </p>

          {trabajadores.length > 0 ? (
            <ul class="mt-5 space-y-4">
              {trabajadores.map((trabajador) => (
                <li class="rounded-2xl border border-[#200934]/10 p-4 text-sm text-[#200934]/80">
                  <p class="text-base font-semibold text-[#200934]">
                    {`${trabajador.primer_nombre_trabajador}${
                      trabajador.segundo_nombre_trabajador
                        ? ` ${trabajador.segundo_nombre_trabajador}`
                        : ""
                    } ${trabajador.apellido_p_trabajador} ${trabajador.apellido_m_trabajador}`}
                  </p>
                  <p class="text-[#200934]/70">RUT: <span class="font-medium text-[#200934]">{trabajador.rut_trabajador}</span></p>
                  <p class="text-[#200934]/70">
                    Especialidad:{" "}
                    <span class="font-medium text-[#200934]">
                      {trabajador.especialidad?.nombre_especialidad ?? "Sin asignar"}
                    </span>
                  </p>
                  <p class="text-[#200934]/70">
                    Estado: <span class="font-medium text-[#200934]">{trabajador.estado_trabajador}</span>
                  </p>
                  <p class="text-[#200934]/70">
                    Contacto: <span class="font-medium text-[#200934]">{trabajador.correo_trabajador}</span> •{" "}
                    <span class="font-medium text-[#200934]">{trabajador.celular_trabajador}</span>
                  </p>
                </li>
              ))}
            </ul>
          ) : null}
        </article>
      </section>
    </div>
  </section>
</Layout>

<script type="module" lang="ts">
  const form = document.querySelector<HTMLFormElement>('#create-worker-form');
  const statusField = document.querySelector<HTMLParagraphElement>('#create-worker-status');
  const submitButton = document.querySelector<HTMLButtonElement>('#create-worker-submit');

  const toJSON = (formData: FormData) => {
    const payload: Record<string, unknown> = {};
    formData.forEach((value, key) => {
      payload[key] = typeof value === 'string' ? value.trim() : value;
    });
    return payload;
  };

  if (form && statusField && submitButton) {
    form.addEventListener('submit', async (event) => {
      event.preventDefault();
      statusField.textContent = '';

      const payload = toJSON(new FormData(form));

      submitButton.disabled = true;
      const originalText = submitButton.textContent;
      submitButton.textContent = 'Guardando...';

      try {
        const response = await fetch('/api/admin/trabajadores', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload),
        });

        const data = await response.json();

        if (!response.ok) {
          statusField.textContent = data.error ?? 'No pudimos completar el registro.';
          statusField.classList.remove('text-emerald-600');
          statusField.classList.add('text-rose-600');
          return;
        }

        statusField.textContent = `Trabajador creado. Contraseña inicial: ${data.initialPassword}`;
        statusField.classList.remove('text-rose-600');
        statusField.classList.add('text-emerald-600');
        form.reset();
        setTimeout(() => window.location.reload(), 1200);
      } catch (error) {
        console.error(error);
        statusField.textContent = 'Error de conexión. Intenta nuevamente.';
        statusField.classList.remove('text-emerald-600');
        statusField.classList.add('text-rose-600');
      } finally {
        submitButton.textContent = originalText;
        submitButton.disabled = false;
      }
    });
  }
</script>
